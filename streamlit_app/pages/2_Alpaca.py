import pandas as pd
import numpy as np
import streamlit as st
import os, io
import sys
from pathlib import Path
import ta
from ta.volatility import BollingerBands
from itertools import product
from scipy.optimize import minimize
from datetime import datetime, timedelta, timezone
import plotly.express as px
import plotly.graph_objects as go
from decimal import Decimal


import json
import pickle
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
try:
  from alpaca_trade_api.rest import REST
except Exception:
  REST = None
try:
  from alpaca.trading.client import TradingClient
except Exception:
  TradingClient = None
try:
  from alpaca.trading.requests import GetPortfolioHistoryRequest, GetOrdersRequest
except Exception:
  GetPortfolioHistoryRequest, GetOrdersRequest = None, None
try:
  from alpaca.trading.enums import QueryOrderStatus
except Exception:
  QueryOrderStatus = None
try:
  from alpaca.common.enums import Sort
except Exception:
  Sort = None

root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, root)

from reporting.performance_report import calculate_performance_metrics
from execution.execute_trades import get_current_position_qty, execute_signal
from execution.strategies_robot_optimizer import _normalise_returns
from execution.run_bot import load_latest_reports_by_symbol, determine_qty
from utils.chat_component import init_chat_with_emilio
from utils.portfolio import optimize_weights, generate_random_portfolios
from utils.compare_strategies import clean_name, compare_strategies
from utils.settings import ALPACA_API_KEY, ALPACA_SECRET_KEY,ALPACA_PAPER_URL, DATA_ROOT
from utils.risk_management import (compute_dashboard_metrics, allowed_max_qty,
                                   can_place_order, reserve_order_risk, post_slack_risk_summary)
from broker.cash import compute_investable_cash
from broker.execution import build_order_plan
from broker.alpaca_executor import plot_equity_png
from broker.strategy_rules import choose_best_strategy_by_sharpe
from broker.persistence import load_best_strat_sqlite



if "plan_ready" not in st.session_state:
    st.session_state.plan_ready       = False   # le plan est-il pr√™t ?
    st.session_state.rebalance_plan   = []      # liste d'ordres
    st.session_state.rebalance_df_raw = None    # DataFrame brut (pas le style)
    st.session_state.rebalance_cash   = 0.0


# === CONFIG PATH ===
# On remonte maintenant de 3 niveaux pour atteindre la racine du projet
ROOT_DIR = os.path.dirname(
             os.path.dirname(                # to streamlit_app
               os.path.dirname(              # to project root
                  os.path.abspath(__file__))))

DATA_DIR = DATA_ROOT
REPORT_DIR = os.path.join(ROOT_DIR, "reporting")
RESULT_DIR = os.path.join(REPORT_DIR, "resultat")
ML_TRAIN_DIR = os.path.join(ROOT_DIR, "ml")
ML_MODELS_DIR = os.path.join(ML_TRAIN_DIR, "trained_models")

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(REPORT_DIR, exist_ok=True)
os.makedirs(RESULT_DIR, exist_ok=True)
os.makedirs(ML_TRAIN_DIR, exist_ok=True)
os.makedirs(ML_MODELS_DIR, exist_ok=True)

try:
  api = REST(ALPACA_API_KEY, ALPACA_SECRET_KEY, base_url=ALPACA_PAPER_URL)
  client = TradingClient(ALPACA_API_KEY, ALPACA_SECRET_KEY, paper="Paper trading")
except Exception:
  if REST is None or TradingClient is None:
        st.warning("Mode d√©mo : les fonctionnalit√©s Alpaca sont d√©sactiv√©es sur Streamlit Cloud.")
        st.info("Pour les ordres et le bot, utilisez l‚Äôenvironnement local / script auto_bot.py.")
        st.stop()  # ou return si c‚Äôest dans une fonction/page

# === OPENAI CHAT -appel du chat Emilio ===
#init_chat_with_emilio()
st.title("ü¶ô Alpaca")
tabs = st.tabs(["ü¶ô En temps r√©el", "‚öôÔ∏è Passage d‚Äôordres","ü§ñ Le Bot de Trading"])

# === CREATION MODELE MACHINE LEARNING ===
with tabs[0]:
    st.header("ü¶ô Alpaca ‚Äî En temps r√©el")
    if REST is None or TradingClient is None:
        st.warning("Mode d√©mo : les fonctionnalit√©s Alpaca sont d√©sactiv√©es sur Streamlit Cloud.")
        st.info("Pour les ordres et le bot, utilisez l‚Äôenvironnement local / script auto_bot.py.")
        st.stop()  # ou return si c‚Äôest dans une fonction/page
  
    # === PORTFOLIO EN TEMPS R√âEL ALPACA ===
    st.subheader("üì¶ Portefeuille en temps r√©el (Alpaca)")


    @st.cache_data(ttl=3600)
    def load_portfolio(_api):
        try:
            positions = _api.list_positions()
            return pd.DataFrame([p._raw for p in positions])
        except Exception as e:
            st.error(f"Erreur de chargement Alpaca : {e}")
            return pd.DataFrame()


    try:
        portfolio_df = load_portfolio(api)
        if not portfolio_df.empty:
            st.dataframe(portfolio_df[["symbol", "qty", "avg_entry_price", "market_value", "unrealized_pl"]])

        else:
            st.warning("Portefeuille vide ou aucune position active.")
    except Exception as e:
        st.warning(f"Connexion Alpaca impossible : {e}")

    account = api.get_account()
    cash = float(account.cash)
    equity = float(account.equity)
    buying_power = float(account.buying_power)
    last_equity = float(account.last_equity)
    daily_change = equity - last_equity
    daily_change_pct = (equity / last_equity) - 1.0
    st.write(f"üí∞ Pouvoir d'achat (paper): **${buying_power:,.2f}**")
    st.write(f"üí∞ Valeur totale portfolio (paper): **${equity:,.2f} - %{daily_change_pct:,.2f}**")
    st.write(f"üí∞ Cash disponible (paper): **${cash:,.2f}**")

    st.subheader("üìä Graphe d'Equity portfolio Alpaca")
    st.caption("Source : API Portfolio History d‚ÄôAlpaca.")
    period = st.radio("P√©riode", ["1D", "1M", "1A"], index=0, horizontal=True)
    # timeframes conseill√©s pour un rendu ¬´ propre ¬ª
    timeframe_by_period = {"1D": "5Min", "1M": "1D", "1A": "1D"}
    timeframe = timeframe_by_period[period]

    # Pour la crypto 24/7, Alpaca recommande:
    # intraday_reporting="continuous", pnl_reset="no_reset" (facultatif)
    # cf. docs officielles.
    hist_req = GetPortfolioHistoryRequest(
        period=period,
        timeframe=timeframe,
        extended_hours=True,           # inclut pre/post-market si < 1D
        # intraday_reporting="extended_hours",  # ou "continuous" pour crypto
        # pnl_reset="no_reset",                # utile pour crypto
    )

    try:
        hist = client.get_portfolio_history(hist_req)  # renvoie PortfolioHistory
        # -> attributs arrays: timestamp, equity, profit_loss, ...
        ts = [datetime.fromtimestamp(t, tz=timezone.utc) for t in hist.timestamp]
        df_hist = pd.DataFrame({"equity": [float(x) for x in hist.equity]}, index=pd.to_datetime(ts))
        # Affiche en IMAGE (png)
        st.image(plot_equity_png(df_hist), caption=f"Equity ‚Äì {period} ({timeframe})", use_column_width=True)
        # Option : tableau brut
        with st.expander("Voir les donn√©es (√©chantillon)"):
            st.dataframe(df_hist.tail(20))
        # === üõ°Ô∏è Risk Dashboard ===
        st.subheader("üõ°Ô∏è Risk Dashboard")
        lookback = st.slider("Fen√™tre (jours)", 20, 252, 60)
        alpha = 0.95
        k_pct = st.slider("k% de la VaR pour la taille max d'une position", 1, 50, 10)

        if st.toggle("historique daily (1M x 1D)", value=True):
            risk_hist_req = GetPortfolioHistoryRequest(
                period="1M",  # >= quelques semaines
                timeframe="1D",  # returns JOURS
                extended_hours=True
            )
            hist_risk = client.get_portfolio_history(risk_hist_req)
            ts_risk = [datetime.fromtimestamp(t, tz=timezone.utc) for t in hist_risk.timestamp]
            df_risk = pd.DataFrame({"equity": [float(x) for x in hist_risk.equity]},
                                   index=pd.to_datetime(ts_risk))

            equity_ser = df_risk["equity"].dropna().tail(lookback + 1)
        else:
            equity_ser = df_hist["equity"]
            if timeframe == "5Min":  # 1D -> 5Min
                equity_ser = equity_ser.resample("1D").last()
            equity_ser = equity_ser.dropna().tail(lookback + 1)  # +1 pour pct_change interne

        metrics = compute_dashboard_metrics(
            equity_series=equity_ser,
            equity_now=float(account.equity),
            lookback=lookback,
            alpha=alpha
        )
        st.session_state["risk_metrics"] = metrics
        st.session_state["risk_k_pct"] = k_pct

        st.metric("Volatilit√© annualis√©e (ex-ante)", f"{metrics['vol_ann'] * 100:.2f}%")
        c1, c2 = st.columns(2)
        with c1:
            st.metric("VaR 95% (1j)", f"-${metrics['var_$']:,.0f}")
        with c2:
            st.metric("ES 95% (1j)", f"-${metrics['es_$']:,.0f}")

        if portfolio_df.empty or "symbol" not in portfolio_df.columns:
            st.info("Portefeuille vide : entre un ticker manuellement.")
            symbol_size = st.text_input("Ticker", value="AAPL")
        else:
            symbol_size = st.selectbox("Choisir le Ticker pour calculer la taille max de position",
                                       portfolio_df["symbol"])
        if symbol_size:
            try:
                last_price = float(api.get_latest_trade(symbol_size).price)
                qty_max = allowed_max_qty(last_price, metrics["var_$"], k_pct)
                st.write(f"üìè Taille max {symbol_size} : **{qty_max}** actions (k = {k_pct}%).")
            except Exception as e:
                st.warning(f"Prix introuvable pour {symbol_size}: {e}")

        # Envoi Slack (si SLACK_WEBHOOK_URL disponible)

        #Totalement optionnel. C‚Äôest juste pour :
        # pousser des alertes (ex : ‚ÄúVaR ‚Üë 50% vs hier‚Äù, ‚Äúordre bloqu√© par k%√óVaR‚Äù),
        # loguer un snapshot de risque quand tu n‚Äôas pas l‚Äôappli ouverte.

        webhook = None
        try:
            webhook = st.secrets.get("SLACK_WEBHOOK_URL", None)
        except Exception:
            import os

            webhook = os.environ.get("SLACK_WEBHOOK_URL", None)

        if webhook and st.button("Publier ces m√©triques dans Slack"):
            ok = post_slack_risk_summary(webhook, metrics,
                                         symbol=symbol_size if symbol_size else None,
                                         qty_max=qty_max if "qty_max" in locals() else None,
                                         k_pct=k_pct)
            st.success("Envoy√© dans Slack ‚úÖ" if ok else "√âchec d'envoi Slack")
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration de l‚Äôhistorique du portefeuille : {e}")

    st.subheader("üìã Liste d‚Äôordres")
    st.caption("Liste d‚Äôordres via TradingClient.get_orders().")
    filt_label = st.selectbox("Statut", ["Tous", "Ouverts", "Ferm√©s"], index=0)
    status_map = {
        "Tous": QueryOrderStatus.ALL,
        "Ouverts": QueryOrderStatus.OPEN,
        "Ferm√©s": QueryOrderStatus.CLOSED,
    }
    limit = st.slider("Nombre d‚Äôordres", min_value=10, max_value=200, value=50, step=10)

    try:
        orders = client.get_orders(
            GetOrdersRequest(
                status=status_map[filt_label],
                limit=limit,
                direction=Sort.DESC,   # ordonner du plus r√©cent au plus ancien
            )
        )
        rows = []
        for o in orders:
            rows.append({
                "submitted_at": getattr(o, "submitted_at", None),
                "symbol": getattr(o, "symbol", None),
                "side": getattr(o, "side", None),
                "type": getattr(o, "type", None),
                "status": getattr(o, "status", None),
                "qty": getattr(o, "qty", None),
                "notional": getattr(o, "notional", None),
                "filled_qty": getattr(o, "filled_qty", None),
                "filled_avg_price": getattr(o, "filled_avg_price", None),
                "limit_price": getattr(o, "limit_price", None),
                "stop_price": getattr(o, "stop_price", None),
                "time_in_force": getattr(o, "time_in_force", None),
            })
        df_orders = pd.DataFrame(rows)
        st.dataframe(df_orders, use_container_width=True)
    except Exception as e:
        st.error(f"Erreur lors du chargement des ordres : {e}")


with tabs[1]:
    st.header("ü¶ô Alpaca ‚Äî Passage d‚Äôordres")
    if REST is None or TradingClient is None:
            st.warning("Mode d√©mo : les fonctionnalit√©s Alpaca sont d√©sactiv√©es sur Streamlit Cloud.")
            st.info("Pour les ordres et le bot, utilisez l‚Äôenvironnement local / script auto_bot.py.")
            st.stop()  # ou return si c‚Äôest dans une fonction/page
  
    st.subheader("üìã M√©mo des strat√©gies charg√©es")
    if "strategies_to_execute" in st.session_state:
        st.write("Le m√©mo des strat√©gies √† ex√©cuter est bien charg√© dans la session :")
        data_for_df = []
        for ticker, info_tuple in st.session_state["strategies_to_execute"].items():
            strategy_name = info_tuple[0]  # Le premier √©l√©ment du tuple est la strat√©gie
            weight_value = info_tuple[1]  # Le deuxi√®me √©l√©ment du tuple est le poids

            data_for_df.append({
                "Ticker": ticker,
                "Strat√©gie": str(strategy_name),  # Conversion en string pour la s√©curit√©
                "Poids": float(weight_value)  # Conversion en float pour la s√©curit√©
            })

        memo_df = pd.DataFrame(data_for_df)
        st.dataframe(memo_df)
    else:
        st.info("Aucun m√©mo de strat√©gie n'a √©t√© charg√© pour l'instant.")

    # --- 1) R√©cup√©ration du portfolio et de l'account ---
    account = api.get_account()
    cash = float(account.cash)

    st.subheader("‚öôÔ∏è Param√®tres d‚Äôex√©cution Alpaca")

    use_pct = st.slider("% du cash √† d√©ployer", 1.0, 100.0, 25.0)


    exec_orders = st.button("üöÄ Pr√©parer l'ex√©cution des ordres pond√©r√©s", key="prepare")


    if exec_orders:
        if use_pct <= 0:
            st.warning("Choisissez un pourcentage > 0")
            st.stop()

        try:
            memo = st.session_state["strategies_to_execute"]
        except KeyError:
            st.warning("‚ùå Avez-vous charg√© le M√©mo des strat√©gies √† ex√©cuter?")
            st.session_state["strategies_to_execute"] = []
            memo = st.session_state["strategies_to_execute"]

        with st.spinner("Pr√©paration des ordres‚Ä¶"):
            # √âtat actuel du compte
            positions = {p.symbol: int(p.qty) for p in api.list_positions()}


            # Plan th√©orique des ordres
            order_plan, recap = build_order_plan(
                api=api,
                positions=positions,
                memo=memo,  # ton dict {symbol: (strat, weight_pct)}
                cash=cash,
                pct=use_pct,
                return_recap = True
            )

            recap_df = pd.DataFrame(recap).set_index("Symbol").sort_values(by="Poids (%)",ascending=False)

            st.session_state.rebalance_plan = order_plan
            st.session_state.rebalance_df = recap_df
            st.session_state.rebalance_cash = compute_investable_cash(cash, use_pct)
            st.session_state.plan_ready = True
            st.success("Plan g√©n√©r√© ! V√©rifie le tableau ci-dessous puis confirme.")


    # Affichage
    if st.session_state.plan_ready:
        st.subheader("üìã Plan de r√©√©quilibrage (pr√©-visualisation)")

        def highlight(row):
            return ["background-color:#ffdddd" if row["Œî Qty"] else "" for _ in row]

        recap_df_styled = (
            st.session_state.rebalance_df
            .style
            .apply(highlight, axis=1)
            .format({"Poids (%)": "{:.3f}","Prix": "{:.2f}", "Valeur cible $": "{:,.2f}"})
        )
        st.dataframe(recap_df_styled, use_container_width=True)

        # Contr√¥le de budget temps-r√©el
        remaining_cash = compute_investable_cash(cash, use_pct)

        # Boucle d‚Äôenvoi *effectif* des ordres
        if st.button("‚úÖ Confirmer et envoyer les ordres", key="confirm"):
            remaining_cash = st.session_state.rebalance_cash

            for od in st.session_state.rebalance_plan:
                # -- od == {"symbol": "AAPL", "side": "buy"/"sell", "qty": 12, "est_cost": 2 384.16}
                cost = od["est_cost"]
                symbol = od["symbol"]

                # a) On v√©rifie qu‚Äôon reste dans le budget
                if cost > remaining_cash and od["side"] == "buy":
                    st.warning(f"‚õî Budget insuffisant pour {symbol} : "
                               f"il reste seulement {remaining_cash:,.2f}$")
                    continue  # on saute l'ordre, on ne stoppe pas toute la boucle

                # b) On r√©cup√®re le dernier prix pour le limit order
                price = float(api.get_latest_trade(symbol).price)

                # c) On soumet l‚Äôordre
                api.submit_order(
                    symbol=symbol,
                    qty=od["qty"],
                    side=od["side"],
                    type="limit", #passer un ordre √† limite
                    limit_price=round(price,2),
                    time_in_force="day",
                )

                # d) Suivi visuel + update du budget
                st.success(f"‚úÖ {od['side'].upper()} {od['qty']} √ó {symbol} envoy√© "
                           f"(‚âà {cost:,.2f}$)")
                if od["side"] == "buy":
                    remaining_cash -= cost

            st.session_state.plan_ready = False
            st.session_state.rebalance_plan = []
            st.session_state.rebalance_df_raw = None
            st.session_state.rebalance_cash = 0.0
            st.success("Tous les ordres ont √©t√© soumis ‚úÖ")


with tabs[2]:
    # === SECTION D'EX√âCUTION DU BOT AUTOMATIQUE ===
    st.subheader("ü§ñ Contr√¥le du Bot de Trading")
    if REST is None or TradingClient is None:
                st.warning("Mode d√©mo : les fonctionnalit√©s Alpaca sont d√©sactiv√©es sur Streamlit Cloud.")
                st.info("Pour les ordres et le bot, utilisez l‚Äôenvironnement local / script auto_bot.py.")
                st.stop()  # ou return si c‚Äôest dans une fonction/page
  
    # Activation manuelle depuis l'interface
    activer_bot = st.toggle("üü¢ Activer le bot sur le dernier rapport", value=False)

    if activer_bot:
        st.info("‚öôÔ∏è Le bot est pr√™t √† s'ex√©cuter.")
        # ‚úÖ Nouveaux r√©glages d‚Äôallocation
        use_memo_weights = st.toggle("Utiliser le m√©mo d‚Äôoptimisation pour le sizing", value=True)
        follow_memo_strategy = st.toggle("Suivre la strat√©gie du m√©mo (sinon: meilleur Sharpe 30j)", value=True)
        use_pct_bot = st.slider("% du cash √† d√©ployer (bot)", 1.0, 100.0, 25.0)

        if st.button("üöÄ Lancer maintenant le bot sur le dernier rapport"):
            try:
                reports_by_symbol = load_latest_reports_by_symbol()
                st.write("üìã reports_by_symbol:", reports_by_symbol)

                # ‚Äî‚Äî‚Äî R√©cup√®re le m√©mo (session ‚Üí sinon SQLite)
                memo = st.session_state.get("strategies_to_execute")
                if not memo or not isinstance(memo, dict) or len(memo) == 0:
                    try:
                        best = load_best_strat_sqlite()
                        if best is not None and not best.empty:
                            memo = {row.Ticker: (row.Strategy, float(row.weight)) for _, row in best.iterrows()}
                        else:
                            memo = {}
                    except Exception:
                        memo = {}

                # ‚Äî‚Äî‚Äî Capital d√©ployable pour dimensionner les poids
                account = api.get_account()
                deployable_cash = compute_investable_cash(float(account.cash), use_pct_bot)


                for symbol, rapport_path in reports_by_symbol.items():
                    # üëá V√©rifier ici si Alpaca conna√Æt le symbole, sinon on l'affiche en warning et on skip
                    try:
                        asset = api.get_asset(symbol)
                        if not asset.tradable:
                            st.warning(f"‚ö†Ô∏è¬†{symbol} n‚Äôest pas tradable sur Alpaca¬†‚Äì passage au symbole suivant.")
                            continue
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è¬†Symbole invalide ou inaccessible¬†: {symbol} ({e}) ‚Äì ignor√©.")
                        continue
                    st.markdown(f"### ‚öôÔ∏è Traitement pour **{symbol}**")

                    df_temp = pd.read_csv(rapport_path, index_col=0, parse_dates=True)
                    df_temp.index = pd.to_datetime(df_temp.index, utc=True).tz_convert(None)
                    last_price = df_temp["Close"].iloc[-1]


                    # üîé S√©lection de la strat√©gie
                    memo_strat = memo.get(symbol, (None, None))[0] if use_memo_weights else None
                    if follow_memo_strategy and memo_strat:
                        # On suit la strat√©gie choisie par l‚Äôoptimisation (si elle existe dans le rapport)
                        sig_col_candidate = f"{memo_strat}_Signal"
                        if sig_col_candidate in df_temp.columns:
                            best_name, best_sig_col, best_ret_col, best_sr = memo_strat, sig_col_candidate, f"{memo_strat}_Returns", None
                        else:
                            # fallback: meilleur Sharpe si la colonne du m√©mo n'existe pas
                            best_name, best_sig_col, best_ret_col, best_sr = choose_best_strategy_by_sharpe(df_temp)
                    else:
                        best_name, best_sig_col, best_ret_col, best_sr = choose_best_strategy_by_sharpe(df_temp)

                    if best_sig_col is None:
                        st.info("‚ÑπÔ∏è Aucune paire <Strat√©gie>_Returns/_Signal d√©tect√©e "
                                "‚Äî on ne peut pas appliquer la r√®gle Sharpe 30j.")
                    else:
                        if (best_sr is None) and not follow_memo_strategy:
                            st.info(f"‚ÑπÔ∏è Pas assez de donn√©es pour calculer le Sharpe 30j de {symbol}"
                                    f" ‚Äî pas de remplacement automatique.")
                        elif (best_sr is not None) and (best_sr < 0):
                            st.warning(f"‚õî {symbol} : Sharpe 30j n√©gatif pour toutes les strat√©gies"
                                       f" (meilleur = {best_sr:.2f}). Aucun ordre ne sera propos√©.")
                            # on passe au symbole suivant (pas d'UI quantit√©/bouton pour ce symbole)
                            continue
                        else:
                            st.success(f"‚úÖ {symbol} : strat√©gie s√©lectionn√©e ¬´ {best_name} ¬ª "
                                       f"{'' if best_sr is None else f' (Sharpe 30j = {best_sr:.2f})'}.")

                    # ‚Äî‚Äî‚Äî Quantit√© par d√©faut : poids du m√©mo ‚Üí sinon sizing classique
                    default_qty, cash = determine_qty(symbol, mode="paper", last_price=last_price)
                    if use_memo_weights and symbol in memo and memo[symbol][1] is not None:
                        weight_pct = float(memo[symbol][1])  # d√©j√† en %
                        target_notional = (weight_pct / 100.0) * deployable_cash
                        qty_from_weight = int(max(0, target_notional // float(last_price)))
                        if qty_from_weight > 0:
                            default_qty = qty_from_weight

                        # Affichage du cash disponible
                    st.write(f"üí∞ Cash disponible (paper): **${cash:,.2f}**")

                    state_key = f"qty_{symbol}"
                    default_value = max(0, int(default_qty))

                    # purge/sanitarise la valeur m√©moris√©e si elle existe
                    if state_key in st.session_state:
                        if not isinstance(st.session_state[state_key], int) or st.session_state[state_key] < 0:
                            st.session_state[state_key] = default_value

                    raw_max = int(cash // last_price) if last_price > 0 else 1
                    max_val = max(0, raw_max)  # emp√™che un max_value n√©gatif (arrive quand cash<0)

                    # >> input pour ajuster la quantit√© (pr√©-remplie via poids si dispo)
                    qty = st.number_input(
                        f"Quantit√© pour {symbol}",
                        min_value=0,
                        max_value=max_val,
                        value=st.session_state.get(state_key, default_value),
                        step=1,
                        key=state_key  # cl√© unique
                    )

                    # >> bouton d√©di√© par symbole
                    if st.button(f"üöÄ Ex√©cuter ordre pour {symbol}", key=f"btn_{symbol}"):
                        # on relit le DataFrame pour r√©cup√©rer le signal
                        df = pd.read_csv(rapport_path, index_col=0, parse_dates=True)
                        df.index = pd.to_datetime(df.index, utc=True).tz_convert(None)


                        # üîÅ Re-s√©lection/contr√¥le au clic (robuste si le fichier a chang√©)
                        if follow_memo_strategy and memo_strat:
                            cand = f"{memo_strat}_Signal"
                            if cand in df.columns:
                                best_name, best_sig_col, best_ret_col, best_sr = memo_strat, cand, f"{memo_strat}_Returns", None
                            else:
                                best_name, best_sig_col, best_ret_col, best_sr = choose_best_strategy_by_sharpe(df)
                        else:
                            best_name, best_sig_col, best_ret_col, best_sr = choose_best_strategy_by_sharpe(df)

                        if best_sig_col is None:
                            # fallback minimaliste si aucune colonne d√©tect√©e
                            signal_cols = [c for c in df.columns if c.endswith("_Signal")] or ["Signal"]
                            signal_col = signal_cols[0]
                            last_signal = int(df[signal_col].dropna().iloc[-1])
                        else:
                            if (best_sr is not None) and (best_sr < 0):
                                st.warning(
                                    f"‚õî {symbol} : Sharpe 30j n√©gatif (meilleur = {best_sr:.2f}). Pas d‚Äôex√©cution.")
                                continue
                            signal_col = best_sig_col
                            last_signal = int(df[signal_col].dropna().iloc[-1])

                        # >> v√©rification du cash avant ordre
                        cost = qty * last_price

                        risk_metrics = st.session_state.get("risk_metrics")
                        risk_k = st.session_state.get("risk_k_pct", 10)

                        if not risk_metrics:
                            st.warning(
                                "Initialise le Risk Dashboard (onglet En temps r√©el) pour activer les garde-fous.")
                        else:
                            var_dollars = float(risk_metrics.get("var_$") or 0.0)
                            budget = (risk_k / 100.0) * abs(var_dollars)  # budget = k% √ó VaR($)
                            if not can_place_order(cost, k_pct=risk_k, portfolio_var_dollars=risk_metrics["var_$"]):
                                st.error(f"‚õî Ordre rejet√© : co√ªt ‚âà ${cost:,.0f} "
                                         f"> budget {risk_k:.0f}% √ó VaR (‚âà ${budget:,.0f} ; VaR=${var_dollars:,.0f})."
                                         )
                                continue
                            reserve_order_risk(cost)  # on ‚Äòr√©serve‚Äô le risque du jour
                        if cost > cash:
                            st.error(f"üí• Co√ªt de l‚Äôordre (${cost:,.2f}) sup√©rieur au cash dispo (${cash:,.2f}).")
                        else:
                            try:
                                if last_signal == 1:
                                    api.submit_order(symbol=symbol, qty=qty, side="buy",
                                                     type="market", time_in_force="gtc")
                                elif last_signal == -1:
                                    api.submit_order(symbol=symbol, qty=qty, side="sell",
                                                     type="market", time_in_force="gtc")
                                else:
                                    st.info("‚ÑπÔ∏è Signal = 0 ‚Üí pas d‚Äôaction.")
                                    continue

                                st.success(f"‚úÖ {symbol} ‚û§ Signal {last_signal} ex√©cut√© ({qty} actions)")
                            except Exception as e:
                                st.error(f"‚ùå Erreur ex√©cution pour {symbol}: {e}")
            except Exception as e:
                st.error("‚ùå Impossible d'importer le module `run_bot.py`.")
                st.exception(e)
        # else:

    else:
        st.warning("‚õî Le bot est d√©sactiv√©.")
