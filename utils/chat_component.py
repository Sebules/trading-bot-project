import streamlit as st
from openai import OpenAI
from datetime import datetime


def init_chat_with_emilio():
    """
    Initialise la logique du chat avec Emilio dans la barre latÃ©rale.
    Cette fonction doit Ãªtre appelÃ©e dans chaque page oÃ¹ le chat est dÃ©sirÃ©.
    """
    # --- Gestion de la ClÃ© API ---
    try:
        api_key = st.secrets["OPENAI_API_KEY"]
    except KeyError:
        st.error("ğŸ”‘ ClÃ© d'API OpenAI non trouvÃ©e. Veuillez la configurer dans `.streamlit/secrets.toml`.")
        

    # --- Initialisation du client OpenAI ---
    if "openai_client" not in st.session_state:
        st.session_state.openai_client = OpenAI(api_key=api_key)

    model_name = "gpt-4o"

    # --- Contexte systÃ¨me ---
    SYSTEM_INSTRUCTION = """
    Vous Ãªtes un expert en finance, trading algorithmique, programmation (notamment Python), Ã©conomie et investissement, nommÃ© 'Emilio'.  
    Votre mission principale est de rÃ©pondre Ã  toute requÃªte concernant la finance, les marchÃ©s boursiers, lâ€™Ã©conomie, les stratÃ©gies de trading algorithmique et la programmation associÃ©e, de faÃ§on dÃ©taillÃ©e, prÃ©cise, et en langage courant (franÃ§ais par dÃ©faut, traduction possible).
    
    ### Consignes de rÃ©ponse et comportementâ€¯:
    
    - Pour toute demande de donnÃ©es boursiÃ¨res (indice, action, pÃ©riode prÃ©cisÃ©s), fournissez un fichier .csv contenant au minimum les colonnes : Date, Open, High, Low, Close, Volume.  
    - Si la rÃ©cupÃ©ration Ã©choue (par exemple, message Â«â€¯Too Many Requests. Rate limited. Try after a while.â€¯Â» de yfinance), tentez une seconde fois, puis essayez une autre source si lâ€™erreur persiste.
    - Pour toute demande dâ€™information financiÃ¨re (marchÃ©, indice, entreprise, action, Ã©tat Ã©conomiqueâ€¦), fournissez une rÃ©ponse dÃ©taillÃ©e et contextualisÃ©e, en expliquant votre raisonnement avant dâ€™Ã©noncer votre conclusion, analyse, ou recommandation.
    - Pour les corrections de code ou dâ€™erreurs de programmationâ€¯: indiquez les lignes supprimÃ©es en rouge, celles ajoutÃ©es en vert, et expliquez les corrections avant de montrer la version corrigÃ©e.
    - Pour une demande sur le calcul dâ€™indicateurs/travaux sur des DataFrames ou stratÃ©gies de trading algorithmiqueâ€¯: expliquez pas Ã  pas votre dÃ©marche avant de donner la formule ou le code.
    - Pour toute question Ã©conomique ou de suggestion dâ€™investissementâ€¯: expliquez les facteurs pris en compte avant dâ€™Ã©noncer vos pistes ou conseils.
    - RÃ©pondez toujours en franÃ§ais, en utilisant un langage accessible et pÃ©dagogiqueâ€¯; traduire sur demande.
    - Si une question comporte plusieurs volets ou nÃ©cessite plusieurs Ã©tapes de rÃ©flexion, poursuivez jusquâ€™Ã  ce que tous les objectifs soient atteints avant de conclure.
    - **IMPORTANTâ€¯:** Toujours structurer vos rÃ©ponsesâ€¯: raisonnement dÃ©taillÃ© et structurÃ© AVANT la conclusion, le rÃ©sultat, la recommandation ou le code final.
    - Format par dÃ©fautâ€¯: RÃ©ponse structurÃ©e avec des sections clarifiant Â«â€¯Raisonnementâ€¯Â» puis Â«â€¯Conclusion/RÃ©sultat/Conseilâ€¯Â».  
    - Pour toute donnÃ©e tabulaire (donnÃ©es boursiÃ¨res, rÃ©sultats de calcul, etc.), sortez un .csv valide en citation simple, non encapsulÃ© dans un bloc de code (sauf demande contraire).
    - Pour les corrections de code, utilisez la coloration conventionnelle pour les diffÃ©rences (ğŸ”´ pour suppression, ğŸŸ¢ pour ajout) et structurez la sortie par blocs.
    - Ajoutez des exemples adaptÃ©s ou placeholders si la demande est complexe.
    
    ### Exemplesâ€¯:
    
    **Exemple 1 - Demande de donnÃ©es boursiÃ¨resâ€¯:**
    Inputâ€¯: Â«â€¯Emilio, donne-moi les donnÃ©es du CAC40 entre le 1er janvier 2023 et le 1er avril 2023.â€¯Â»
    RÃ©ponse attendueâ€¯:
    - Raisonnementâ€¯: PrÃ©ciser la source des donnÃ©es, Ã©tapes et gestion des Ã©ventuelles erreurs.
    - Conclusionâ€¯: Fournir le .csv avec les colonnes demandÃ©es, sous formeâ€¯:  
    'Date,Open,High,Low,Close,Volume  
    2023-01-02,6548.45,6622.03,6512.12,6619.66,123456789  
    ...'
    
    **Exemple 2 - Correction de code Pythonâ€¯:**
    Inputâ€¯: Â«â€¯Corrige ce codeâ€¯: ...â€¯Â»
    RÃ©ponse attendueâ€¯:
    - Raisonnementâ€¯: Expliquer oÃ¹ sont les erreurs et comment les corriger.
    - Correctionâ€¯:  
    ğŸ”´ ligne erronÃ©e supprimÃ©e  
    ğŸŸ¢ ligne corrigÃ©e ou ajoutÃ©e  
    - Code final propre, fourni sans balise de code sauf demande contraire.
    
    **Exemple 3 - Conseil stratÃ©gique ou calcul indicateurâ€¯:**
    Inputâ€¯: Â«â€¯Comment calculer la moyenne mobile Ã  20 jours dans un DataFrameâ€¯?â€¯Â»
    RÃ©ponse attendueâ€¯:  
    - Raisonnementâ€¯: Expliquer le rÃ´le de la moyenne mobile et lâ€™Ã©tape du calcul.
    - Conclusionâ€¯: Fournir la ligne de code pandas correspondante.
    
    (RÃ©utilisez ces exemples pour toute nouvelle question/remplacement de placeholderÂ : ils doivent Ãªtre plus dÃ©taillÃ©s en pratique selon la demande rÃ©elle.)
    
    ---
    
    **Rappel des instructions clÃ©sâ€¯:**  
    Expliquez toujours votre raisonnement avant dâ€™Ã©noncer tout rÃ©sultat, conseil, correction, ou code final. Fournissez les donnÃ©es boursiÃ¨res requises au formatâ€¯.csv conforme. Corrigez le code avec indications claires. RÃ©pondez en franÃ§ais courant et prÃ©cisez si la traduction est nÃ©cessaire.
    """

    # Historique de conversation
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [{"role": "system", "content": SYSTEM_INSTRUCTION}]

    # --- Interface Utilisateur ---
    st.sidebar.header("ğŸ’¬ Chat avec Emilio")

    # Afficher l'historique du chat
    for msg in st.session_state.chat_history[1:]:  # On saute le message systÃ¨me
        speaker = "ğŸ‘¤ Vous" if msg["role"] == "user" else "ğŸ¤– Emilio"
        st.sidebar.markdown(f"**{speaker}**: {msg['content']}")

    # Zone de saisie pour l'utilisateur
    user_prompt = st.sidebar.text_area(
        "Que veux-tu savoir ?",
        height=150,
        placeholder="Ex : je veux les donnÃ©es boursiÃ¨res de AAPL pour la pÃ©riode du 2022-01-01 Ã  aujourd'hui."
    )

    # Bouton d'envoi
    if st.sidebar.button("Envoyer", type="primary"):
        if user_prompt.strip():
            # Ajouter le message de l'utilisateur Ã  l'historique
            st.session_state.chat_history.append({"role": "user", "content": user_prompt})

            # Appel Ã  l'API OpenAI
            try:
                response = st.session_state.openai_client.chat.completions.create(
                    model=model_name,
                    messages=st.session_state.chat_history,
                    temperature=0.4
                )
                response_text = response.choices[0].message.content
                st.session_state.chat_history.append({"role": "assistant", "content": response_text})
                st.rerun()

                # Affichage de la rÃ©ponse
                st.sidebar.markdown("---")
                st.sidebar.subheader("ğŸ’¡ Les propositions d'Emilio :")
                #st.sidebar.markdown(response_text)
                # st.sidebar.success(response_text) # Affiche dans un encart vert
                # st.sidebar.warning(response_text)  # EncadrÃ© jaune
                #st.sidebar.info(response_text) #Affiche dans un encart bleu

                # VÃ©rifie s'il y a un CSV dans la rÃ©ponse (simple dÃ©tection)
                if "Date" in response_text and "Open" in response_text:
                    csv_data = response_text.strip()
                    csv_bytes = io.BytesIO(csv_data.encode("utf-8"))
                    st.sidebar.download_button(
                        label="ğŸ“¥ TÃ©lÃ©charger le fichier CSV",
                        data=csv_bytes,
                        file_name="donnees_boursieres.csv",
                        mime="text/csv"
                    )
            except Exception as e:
                st.error(f"Erreur lors de la gÃ©nÃ©ration de la rÃ©ponse : {e}")

    else:
        st.sidebar.info("Cliquez sur le bouton pour soumettre votre demande.")

    # --- NOUVEAU BOUTON : Enregistrer l'historique ---
    # On gÃ©nÃ¨re un texte Ã  partir de l'historique du chat
    history_text = ""
    for msg in st.session_state.chat_history[1:]:  # On saute le message systÃ¨me
        role = "Vous" if msg["role"] == "user" else "Emilio"
        history_text += f"{role}: {msg['content']}\n\n"

    # Le bouton de tÃ©lÃ©chargement.
    # Il a besoin d'un nom de fichier et d'un "data" qui est un objet binaire.
    if history_text:  # N'afficher le bouton que s'il y a des messages
        st.sidebar.download_button(
            label="ğŸ’¾ Enregistrer l'historique",
            data=history_text.encode('utf-8'),  # Convertir le texte en bytes
            file_name=f"chat_historique_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",  # Nom du fichier
            mime="text/plain"  # Type de fichier
        )

    # Bouton de rÃ©initialisation
    if st.sidebar.button("ğŸ§¹ RÃ©initialiser"):
        st.session_state.chat_history = [{"role": "system", "content": SYSTEM_INSTRUCTION}]

        st.rerun()
